includeConfig "config/utils.config"

params {
  input_dir         = ""            // Base path to input images 
  output_dir        = ""            // Base path to output location
  file_type         = "moldev"      // "moldev" or "zeiss" microscope?
  use_2d            = false         // 2d image processing, instead of 3d
  simulate          = false         // Simulate the microscopy data (note: use_2d will be set to true)
  num_simulations   = 2             // Number of samples to simulate
  test_image_count  = 0             // The number of random images to use for spot check. If 0, then all images used
  test_image_names  = null          // Select >=1 image to assess via spot check (comma-delimited list of file base names, e.g., "2024_04_17_Baseline-01(1)")
  llm               = "gpt-4o-mini" // OpenAI LLM for log summarization ("gpt-4o-mini" or "gpt-4o")
  decay_time        = 0.5           // The average decay time of a transient
  gSig              = 6             // The expected half size of neurons (height, width)
  rf                = 40            // The size of patches for the correlation image
  min_SNR           = 3             // Adaptive threshold for transient size
  r_values_min      = 0.85          // Threshold for spatial consistency
  tsub              = 2             // Downsampling factor in time
  ssub              = 2             // Downsampling factor in space
  p_th              = 0.75          // Threshold percentile for image processing
  min_corr          = 0.8           // Min peak value from correlation image
  min_pnr           = 5             // Min peak to noise ration from PNR image
  ring_size_factor  = 1.4           // Radius of ring is gSig*ring_size_factor
  f_baseline_perc   = 8             // Percentile value for the filter when converting fluorescence data to delta F/F
  win_sz            = 500           // Window size for the percentile filter (calc_dff_f0 step) 
}

// working directory (-work-dir)
workDir = getWorkDir()

//-- Extra configs --//
includeConfig "config/process.config"
includeConfig "config/profiles.config"

//-- Functions --//
// Remove trailing forward slashes in a string
def fmtPath(path_str) {
    return path_str.replaceAll(/\/+$/, '')
}

// Limit to the max resources of the available machine
def check_max(obj, type){
    if(type == 'memory'){
        if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1){
            return params.max_memory as nextflow.util.MemoryUnit
        }
    } else if(type == 'time'){
        if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1){
            return params.max_time as nextflow.util.Duration
        }
    } else if(type == 'cpus'){
        if (obj > params.max_cpus as int){
            return params.max_cpus as int
        }
    }
    return obj
}

def getWorkDir() {
    def userGroup = "id -gn".execute().text.trim()
    def userName = "whoami".execute().text.trim()
    def workDir = "/scratch/$userGroup/$userName/nextflow-work/lizard-wizard"
    return workDir
}

